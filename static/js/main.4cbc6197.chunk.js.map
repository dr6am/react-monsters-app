{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","monsters","map","item","key","SearchBox","type","onChange","handleChange","placeholder","App","state","fetch","then","d","json","resp","setState","data","catch","e","console","error","this","search","filtered","filter","length","toLowerCase","includes","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6UAIcA,G,YAAO,SAAAC,GACjB,OAAO,yBAAKC,UAAW,kBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,0BAA4DC,IAAI,YACxE,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCJZC,EAAW,SAACP,GACtB,OACI,yBAAKC,UAAU,aACVD,EAAMQ,SAASC,KAAI,SAACC,GAAD,OAChB,kBAAC,EAAD,CAAMC,IAAKD,EAAKP,GAAIE,KAAMK,EAAKL,KAAMF,GAAIO,EAAKP,GAAIG,MAAOI,EAAKJ,aCLjEM,G,MAAY,SAACZ,GACtB,OACI,2BAAOa,KAAK,SAASZ,UAAW,SAAUa,SAAUd,EAAMe,aAAcC,YAAahB,EAAMgB,gBCkCpFC,G,iNAhCXC,MAAM,CACF,KAAO,GACP,OAAS,M,mFAGQ,IAAD,OAEhBC,MAAM,8CACDC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GAAO,EAAKC,SAAS,CAACC,KAAMF,OACjCG,OAAM,SAACC,GAAKC,QAAQC,MAAMF,Q,+BAEzB,IAAD,SACkBG,KAAKZ,MAApBO,EADH,EACGA,KAAMM,EADT,EACSA,OACRC,EAAWP,EAAKQ,QAAO,SAACvB,GAC1B,OAAGA,EAAKL,KAAK6B,OAAS,GAAe,MAAVH,EAChBrB,EAAKL,KAAK8B,cAAcC,SAASL,EAAOI,eAChC,MAAVJ,EACErB,OADL,KAIV,OACI,yBAAKT,UAAU,OACX,wBAAIA,UAAW,SAAf,oBACA,kBAAC,EAAD,CAAWc,aAAc,SAAAY,GAAC,OAAE,EAAKH,SAAS,CAACO,OAAQJ,EAAEU,OAAOC,SACjDtB,YAAa,cACxB,kBAAC,EAAD,CAAUR,SAAUwB,S,GA3BlBO,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.4cbc6197.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\n\r\nexport  const Card = props=>{\r\n    return(<div className={\"card-container\"}>\r\n                <img src={`https://robohash.org/${props.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>)\r\n}","import React from 'react';\r\nimport './card-list.styles.css.css'\r\nimport {Card} from \"../card/card.component\";\r\n\r\nexport  const CardList = (props)=>{\r\n    return(\r\n        <div className=\"card-list\">\r\n            {props.monsters.map((item)=>\r\n                <Card key={item.id} name={item.name} id={item.id} email={item.email}/>\r\n            )}\r\n        </div>)\r\n}","import React from 'react';\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = (props)=>{\r\n    return(\r\n        <input type=\"search\" className={\"search\"} onChange={props.handleChange} placeholder={props.placeholder} />\r\n        )\r\n}\r\n\r\n//","import React from 'react';\nimport { CardList } from './components/card-list/card-list.component.jsx' ;\nimport { SearchBox } from './components/search-box/search-box.component' ;\nimport './App.css';\n\n\nclass App extends React.Component{\n    state={\n        \"data\":[],\n        \"search\":null\n    }\n\n    componentDidMount() {\n        //https://jsonplaceholder.typicode.com/users\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(d => d.json())\n            .then(resp=>{this.setState({data: resp})})\n            .catch((e)=>{console.error(e)})\n    }\n    render() {\n        const { data, search} =this.state;\n        const filtered = data.filter((item)=>{\n            if(item.name.length > 0 && search != null){\n                return item.name.toLowerCase().includes(search.toLowerCase())\n            }else if(search == null){\n                return item\n            }\n        })\n        return (\n            <div className=\"App\">\n                <h1 className={\"title\"}>Monsters Rolodex</h1>\n                <SearchBox handleChange={e=>this.setState({search: e.target.value})}\n                           placeholder={\"search...\"}/>\n                <CardList monsters={filtered}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}